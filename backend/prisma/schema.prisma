// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  name       String?
  password   String?
  isAdmin    Boolean    @default(false)
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
   reports           Report[]
  sessions   ChatSession[]
}

model ChatSession {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  startedAt     DateTime         @default(now())
  endedAt       DateTime?
  moodSummary   String?
  emotionScore  Json?
  reportStatus  String           @default("pending") // e.g., 'pending', 'generated'
  reports       Report[]
}
model Report {
  id         String       @id @default(uuid())

  sessionId  String       @unique
  userId    String       @map("user_id")
  summary    String
  insights   Json
  suggestions String
  createdAt  DateTime     @default(now())
  generatedAt         DateTime @default(now()) @map("generated_at")
  behavioralInsights  Json?    @map("behavioral_insights")
  recommendations     Json?
  progressMetrics     Json?    @map("progress_metrics")
  reportData          Json?    @map("report_data") // Complete report content
  
  // Relations
  session             ChatSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reports")
}